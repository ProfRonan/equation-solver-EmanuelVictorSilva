============================= test session starts ==============================
platform linux -- Python 3.10.10, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/seuronao/Documents/Equation Solver-04-24-2023-03-36-22/EmanuelVictorSilva
collected 20 items

test_grau_1.py FFFFFFF                                                   [ 35%]
test_grau_2.py FFFFFFFF                                                  [ 75%]
test_grau_invalido.py FFFFF                                              [100%]

=================================== FAILURES ===================================
________________ test_grau_1_a_0[test_input0-expected_output0] _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c02e020>
test_input = ['1', '0']
expected_output = ['A equação é do primeiro grau', 'Valor de a inválido']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "0"], ["A equação é do primeiro grau", "Valor de a inválido"]),
        ],
    )
    def test_grau_1_a_0(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: str):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c04e320>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c04e320> = <_io.StringIO object at 0x7f6b0c04e320>.getvalue

test_grau_1.py:29: AssertionError
__________________ test_grau_1[test_input0-expected_output0] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c07a560>
test_input = ['1', '1', '0']
expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c04ef80>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c04ef80> = <_io.StringIO object at 0x7f6b0c04ef80>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input1-expected_output1] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c02f0d0>
test_input = ['1', '2', '0']
expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f0a0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f0a0> = <_io.StringIO object at 0x7f6b0c04f0a0>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input2-expected_output2] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c02ee90>
test_input = ['1', '10', '0']
expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f880>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f880> = <_io.StringIO object at 0x7f6b0c04f880>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input3-expected_output3] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c02efe0>
test_input = ['1', '1', '-5']
expected_output = ['A equação é do primeiro grau', '5.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f7f0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f7f0> = <_io.StringIO object at 0x7f6b0c04f7f0>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input4-expected_output4] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c1bcf40>
test_input = ['1', '2', '4']
expected_output = ['A equação é do primeiro grau', '-2.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f2e0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f2e0> = <_io.StringIO object at 0x7f6b0c04f2e0>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input5-expected_output5] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c07a3e0>
test_input = ['1', '2', '-4']
expected_output = ['A equação é do primeiro grau', '2.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c04feb0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c04feb0> = <_io.StringIO object at 0x7f6b0c04feb0>.getvalue

test_grau_1.py:56: AssertionError
________________ test_grau_2_a_0[test_input0-expected_output0] _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c1bd3f0>
test_input = ['2', '0']
expected_output = ['A equação é do segundo grau', 'Valor de a inválido']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "0"], ["A equação é do segundo grau", "Valor de a inválido"]),
        ],
    )
    def test_grau_2_a_0(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ac1f0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ac1f0> = <_io.StringIO object at 0x7f6b0c0ac1f0>.getvalue

test_grau_2.py:29: AssertionError
__________________ test_grau_2[test_input0-expected_output0] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c0ba710>
test_input = ['2', '1', '0', '0']
expected_output = ['A equação é do segundo grau', 'A equação possui uma raiz real', 'A equação possui apenas uma raiz real', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0acaf0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0acaf0> = <_io.StringIO object at 0x7f6b0c0acaf0>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input1-expected_output1] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c1bc730>
test_input = ['2', '1', '0', '1']
expected_output = ['A equação é do segundo grau', 'A equação não possui raízes reais']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ad360>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ad360> = <_io.StringIO object at 0x7f6b0c0ad360>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input2-expected_output2] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c0baf80>
test_input = ['2', '1', '0', '-1']
expected_output = ['A equação é do segundo grau', 'A equação possui duas raízes reais', '-1.00', '1.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0adab0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0adab0> = <_io.StringIO object at 0x7f6b0c0adab0>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input3-expected_output3] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c0badd0>
test_input = ['2', '1', '1', '0']
expected_output = ['A equação é do segundo grau', 'A equação possui duas raízes reais', '-1.00', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ae290>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ae290> = <_io.StringIO object at 0x7f6b0c0ae290>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input4-expected_output4] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c0b99c0>
test_input = ['2', '1', '1', '1']
expected_output = ['A equação é do segundo grau', 'A equação não possui raízes reais']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ae9e0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ae9e0> = <_io.StringIO object at 0x7f6b0c0ae9e0>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input5-expected_output5] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c0b8190>
test_input = ['2', '1', '2', '0']
expected_output = ['A equação é do segundo grau', 'A equação possui duas raízes reais', '-2.00', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0af130>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0af130> = <_io.StringIO object at 0x7f6b0c0af130>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input6-expected_output6] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c0ba8c0>
test_input = ['2', '2', '0', '0']
expected_output = ['A equação é do segundo grau', 'A equação possui uma raiz real', 'A equação possui apenas uma raiz real', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in ''
E            +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E            +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E            +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0af910>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0af910> = <_io.StringIO object at 0x7f6b0c0af910>.getvalue

test_grau_2.py:64: AssertionError
___________________ test_grau_invalido[-1-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c1bc9d0>
test_input = '-1', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in ''
E        +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E        +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E        +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f9a0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c04f9a0> = <_io.StringIO object at 0x7f6b0c04f9a0>.getvalue

test_grau_invalido.py:31: AssertionError
___________________ test_grau_invalido[-3-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c079150>
test_input = '-3', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in ''
E        +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E        +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E        +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0af9a0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0af9a0> = <_io.StringIO object at 0x7f6b0c0af9a0>.getvalue

test_grau_invalido.py:31: AssertionError
____________________ test_grau_invalido[0-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c02c190>
test_input = '0', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in ''
E        +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E        +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E        +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0aca60>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0aca60> = <_io.StringIO object at 0x7f6b0c0aca60>.getvalue

test_grau_invalido.py:31: AssertionError
____________________ test_grau_invalido[3-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c1bc940>
test_input = '3', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in ''
E        +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E        +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E        +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0acdc0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0acdc0> = <_io.StringIO object at 0x7f6b0c0acdc0>.getvalue

test_grau_invalido.py:31: AssertionError
___________________ test_grau_invalido[10-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6b0c02d570>
test_input = '10', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in ''
E        +  where '' = <built-in method strip of str object at 0x7f6b0d124030>()
E        +    where <built-in method strip of str object at 0x7f6b0d124030> = ''.strip
E        +      where '' = <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ae7a0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f6b0c0ae7a0> = <_io.StringIO object at 0x7f6b0c0ae7a0>.getvalue

test_grau_invalido.py:31: AssertionError
=========================== short test summary info ============================
FAILED test_grau_1.py::test_grau_1_a_0[test_input0-expected_output0] - Assert...
FAILED test_grau_1.py::test_grau_1[test_input0-expected_output0] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input1-expected_output1] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input2-expected_output2] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input3-expected_output3] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input4-expected_output4] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input5-expected_output5] - AssertionE...
FAILED test_grau_2.py::test_grau_2_a_0[test_input0-expected_output0] - Assert...
FAILED test_grau_2.py::test_grau_2[test_input0-expected_output0] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input1-expected_output1] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input2-expected_output2] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input3-expected_output3] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input4-expected_output4] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input5-expected_output5] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input6-expected_output6] - AssertionE...
FAILED test_grau_invalido.py::test_grau_invalido[-1-Grau inv\xe1lido] - Asser...
FAILED test_grau_invalido.py::test_grau_invalido[-3-Grau inv\xe1lido] - Asser...
FAILED test_grau_invalido.py::test_grau_invalido[0-Grau inv\xe1lido] - Assert...
FAILED test_grau_invalido.py::test_grau_invalido[3-Grau inv\xe1lido] - Assert...
FAILED test_grau_invalido.py::test_grau_invalido[10-Grau inv\xe1lido] - Asser...
============================== 20 failed in 0.12s ==============================
